# Each toolchain must define "stamp" and "copy" tools,
# but they are always the same in every toolchain.
stamp_command = "touch {{output}}"
stamp_description = "STAMP {{output}}"

# We use link instead of copy; the way "copy" tool is being used is
# compatible with links since Ninja is tracking changes to the source.
copy_command = "ln -f {{source}} {{output}} 2>/dev/null || (rm -rf {{output}} && cp -af {{source}} {{output}})"
copy_description = "COPY {{source}} {{output}}"

toolchain("clang") {
  cc = "clang"
  cxx = "clang++"
  ld = cxx
  ar = "ar"

  tool("cc") {
    depfile = "{{output}}.d"
    command = "$cc -MD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} -c {{source}} -o {{output}}"
    depsformat = "gcc"
    description = "CC {{output}}"
    outputs = [
      "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o",
    ]
  }

  tool("cxx") {
    depfile = "{{output}}.d"
    command = "$cxx -MD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}} -c {{source}} -o {{output}}"
    depsformat = "gcc"
    description = "CXX {{output}}"
    outputs = [
      "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o",
    ]
  }

  tool("asm") {
    depfile = "{{output}}.d"
    command = "$cc -MD -MF $depfile {{defines}} {{include_dirs}} {{asmflags}} -c {{source}} -o {{output}}"
    depsformat = "gcc"
    description = "ASM {{output}}"
    outputs = [
      "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o",
    ]
  }

  tool("objc") {
    depfile = "{{output}}.d"
    command = "$cc -MD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} {{cflags_objc}} -c {{source}} -o {{output}}"
    depsformat = "gcc"
    description = "OBJC {{output}}"
    outputs = [
      "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o",
    ]
  }

  tool("objcxx") {
    depfile = "{{output}}.d"
    command = "$cxx -MD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} {{cflags_objcc}} -c {{source}} -o {{output}}"
    depsformat = "gcc"
    description = "OBJCXX {{output}}"
    outputs = [
      "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o",
    ]
  }

  tool("alink") {
    rspfile = "{{output}}.rsp"
    command = "rm -f {{output}} && $ar rcs {{output}} {{inputs}}"
    description = "AR {{output}}"
    rspfile_content = "{{inputs}}"
    outputs = [
      "{{output_dir}}/{{target_output_name}}{{output_extension}}",
    ]
    default_output_dir = "{{target_out_dir}}"
    default_output_extension = ".a"
    output_prefix = "lib"
  }

  tool("solink") {
    outname = "{{target_output_name}}{{output_extension}}"
    outfile = "{{output_dir}}/$outname"
    rspfile = "$outfile.rsp"
    unstripped_outfile = outfile
    if (use_strip) {
      unstripped_outfile = "{{output_dir}}/lib.unstripped/{{target_output_name}}{{output_extension}}"
    }
    if (target_os == "mac") {
      command = "$ld -shared {{ldflags}} -Wl,-install_name,@rpath/\"{{target_output_name}}{{output_extension}}\" -o \"$unstripped_outfile\" -Wl,-filelist,\"$rspfile\" {{libs}} {{solibs}}"
      rspfile_content = "{{inputs_newline}}"
      default_output_extension = ".dylib"
    } else {
      command = "$ld -shared {{ldflags}} -o \"$unstripped_outfile\" -Wl,--Map=\"$unstripped_outfile.map\" -Wl,-soname=\"$outname\" @\"$rspfile\""
      rspfile_content = "-Wl,--whole-archive {{inputs}} {{solibs}} -Wl,--no-whole-archive {{libs}}"
      default_output_extension = ".so"
    }
    if (use_strip) {
      command += " && strip --strip-all \"$unstripped_outfile\" \"$outfile\""
    }
    description = "SOLINK $outfile"
    default_output_dir = "{{root_out_dir}}"
    output_prefix = "lib"
    outputs = [
      outfile,
    ]
    if (outfile != unstripped_outfile) {
      outputs += [ unstripped_outfile ]
    }
  }

  tool("link") {
    outfile = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
    rspfile = "$outfile.rsp"
    unstripped_outfile = outfile
    if (use_strip) {
      unstripped_outfile = "{{root_out_dir}}/exe.unstripped/{{target_output_name}}{{output_extension}}"
    }
    if (target_os == "mac") {
      command = "$ld {{ldflags}} -o \"$unstripped_outfile\" -Wl,-filelist,\"$rspfile\" {{frameworks}} {{solibs}} {{libs}}"
      rspfile_content = "{{inputs_newline}}"
    } else {
      command = "$ld {{ldflags}} -o \"$unstripped_outfile\" -Wl,--Map=\"$unstripped_outfile.map\" -Wl,--start-group @\"$rspfile\" {{solibs}} -Wl,--end-group {{libs}}"
      rspfile_content = "{{inputs}}"
    }
    if (use_strip) {
      command += " && strip --strip-sections \"$unstripped_outfile\" \"$outfile\""
    }
    description = "LINK $outfile"
    default_output_dir = "{{root_out_dir}}"
    outputs = [
      outfile,
    ]
    if (outfile != unstripped_outfile) {
      outputs += [ unstripped_outfile ]
    }
  }

  tool("stamp") {
    command = stamp_command
    description = stamp_description
  }

  tool("copy") {
    command = copy_command
    description = copy_description
  }
}
